
var factories = require("./factories");

var CreateSessionRequest_Description = {
    comment: "Creates a new session with the server.",
    name: "CreateSessionRequest",
    fields: [
        { name: "requestHeader"    ,                fieldType: "RequestHeader"                  },
        { name: "clientDescription",                fieldType: "ApplicationDescription",   documentation:"Describes the client application." },
        { name: "serverUri",                        fieldType: "String",                   documentation:"The URI of the server that the client wants to create a session with." },
        { name: "endpointUrl",                      fieldType: "String",                   documentation:"The URL that the client used to connect to the server." },
        { name: "sessionName",                      fieldType: "String",                   documentation:"A name for the session provided by the client." },
        { name: "clientNonce",                      fieldType: "ByteString",               documentation:"A random number generated by the client." },
        { name: "clientCertificate",                fieldType: "ByteString",               documentation:"The application certificate for the client." },
        { name: "requestedSessionTimeout",          fieldType: "UInt32",                   documentation:"The requested session timeout in milliseconds." },
        { name: "maxResponseMessageSize",           fieldType: "UInt32",                   documentation:"The maximum message size accepted by the client." }
    ]
};
exports.CreateSessionRequest = factories.UAObjectFactoryBuild(CreateSessionRequest_Description);


var CreateSessionResponse_Description = {
    comment: "Creates a new session with the server.",
    name: "CreateSessionResponse",
    fields: [
        { name:"responseHeader",                           fieldType:"ResponseHeader",                 documentation: "A standard header included in all responses returned by servers."},
        { name:"sessionId",                                fieldType:"NodeId",                         documentation: "A identifier which uniquely identifies the session."},
        { name:"authenticationToken",                      fieldType:"SessionAuthenticationToken",     documentation:"The token used to authenticate the client in subsequent requests."},
        { name:"revisedSessionTimeout",                    fieldType:"Duration",                       documentation: "The session timeout in milliseconds."},
        { name:"serverNonce",                              fieldType:"ByteString",                     documentation: "A random number generated by the server."},
        { name:"serverCertificate",                        fieldType:"ApplicationInstanceCertificate", documentation: "The application certificate for the server."},
        { name:"serverEndpoints",             isArray:true,fieldType:"EndpointDescription",            documentation: "The endpoints provided by the server."},
        { name:"serverSoftwareCertificates",  isArray:true,fieldType:"SignedSoftwareCertificate",      documentation: "The software certificates owned by the server."},
        { name:"serverSignature",                          fieldType:"SignatureData",                  documentation: "A signature created with the server certificate."},
        { name:"maxRequestMessageSize",                    fieldType:"UInt32",                         documentation: "The maximum message size accepted by the server."}

    ]
};
exports.CreateSessionResponse = factories.UAObjectFactoryBuild(CreateSessionResponse_Description);


var ActivateSessionRequest_Description =  {
    comment: "Activates a session with the server.",
    name: "ActivateSessionRequest",
    fields: [
        { name:"requestHeader",                            fieldType:"RequestHeader",               documentation:"A standard header included in all requests sent to a server." },
        { name:"clientSignature",                          fieldType:"SignatureData",               documentation:"A signature created with the client certificate from the last server nonce returned by the server." },
        { name:"clientSoftwareCertificates", isArray:true, fieldType:"SignedSoftwareCertificate",   documentation:"The software certificates owned by the client." },
        { name:"localeIds",                  isArray:true, fieldType:"LocaleId",                    documentation:"The locales to use with the session." },
        { name:"userIdentityToken",                        fieldType:"s0:ExtensionObject",          documentation:"The user identity to use with the session."},
        { name:"userTokenSignature",                       fieldType:"SignatureData",               documentation:"A digital signature created with the user identity token."}

    ]
};
exports.ActivateSessionRequest = factories.UAObjectFactoryBuild(ActivateSessionRequest_Description);


 var ActivateSessionResponse_Description =  {
     comment: "Activates a session with the server.",
     name: "ActivateSessionResponse",
     fields: [
         { name:"responseHeader",               fieldType:"ResponseHeader",   documentation:"A standard header included in all responses returned by servers."},
         { name:"serverNonce",                  fieldType:"ByteString",       documentation:"A random number generated by the server."},
         { name:"results",        isArray:true, fieldType:"StatusCode",       documentation:"Any errors during validation of the software certificates."},
         { name:"diagnosticInfos",isArray:true, fieldType:"DiagnosticInfo",   documentation:"The diagnostics associated with the software certificates results."}

     ]
};

exports.ActivateSessionResponse = factories.UAObjectFactoryBuild(ActivateSessionResponse_Description);


var CloseSessionRequest_Description =  {
    comment: "Closes a session with the server.",
    name: "CloseSessionRequest",
    fields: [
        { name:"requestHeader",        fieldType:"RequestHeader",  documentation:"A standard header included in all requests sent to a server."},
        { name:"deleteSubscriptions",  fieldType:"Boolean",         documentation:"If TRUE all subscriptions are deleted when the session is closed."}
    ]
};
exports.CloseSessionRequest = factories.UAObjectFactoryBuild(CloseSessionRequest_Description);

var CloseSessionResponse_Description =  {
    comment: "Closes a session with the server.",
    name: "CloseSessionResponse",
    fields: [
        { name:"responseHeader",        fieldType:"ResponseHeader",  documentation:"A standard header included in all responses returned by servers."}
    ]
};
exports.CloseSessionResponse = factories.UAObjectFactoryBuild(CloseSessionResponse_Description);



var CancelRequest_Description =  {
    comment: "Cancels an outstanding request.",
    name: "CancelRequest",
    fields: [
        { name:"requestHeader",        fieldType:"RequestHeader",  documentation:"A standard header included in all requests sent to a server."},
    ]
};
exports.CancelRequest = factories.UAObjectFactoryBuild(CancelRequest_Description);

var CancelResponse_Description =  {
    comment: "Closes a session with the server.",
    name: "CancelResponse",
    fields: [
        { name:"responseHeader",        fieldType:"ResponseHeader",  documentation:"A standard header included in all responses returned by servers."},
        { name:"CancelCount",           fieldType:"UInt32",          documentation:"The number of requests successfully cancelled."}
    ]
};
exports.CancelResponse = factories.UAObjectFactoryBuild(CancelResponse_Description);
