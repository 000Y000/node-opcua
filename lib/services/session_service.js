
var factories = require("./../misc/factories");
var s  = require("../datamodel/structures");
require("../misc/extension_object");

var CreateSessionRequest_Schema = {
    documentation: "Creates a new session with the server.",
    name: "CreateSessionRequest",
    fields: [
        { name: "requestHeader"    ,                fieldType: "RequestHeader"                  },
        { name: "clientDescription",                fieldType: "ApplicationDescription",   documentation:"Describes the client application." },
        { name: "serverUri",                        fieldType: "String",                   documentation:"The URI of the server that the client wants to create a session with." },
        { name: "endpointUrl",                      fieldType: "String",                   documentation:"The URL that the client used to connect to the server." },
        { name: "sessionName",                      fieldType: "String",                   documentation:"A name for the session provided by the client." },
        { name: "clientNonce",                      fieldType: "ByteString",               documentation:"A random number generated by the client." },
        { name: "clientCertificate",                fieldType: "ByteString",               documentation:"The application certificate for the client." },
        { name: "requestedSessionTimeout",          fieldType: "Duration",                 documentation:"The requested session timeout in milliseconds." },
        { name: "maxResponseMessageSize",           fieldType: "UInt32",                   documentation:"The maximum message size accepted by the client." }
    ]
};
exports.CreateSessionRequest_Schema = CreateSessionRequest_Schema;
exports.CreateSessionRequest = factories.registerObject(CreateSessionRequest_Schema);


var CreateSessionResponse_Schema = {
    documentation: "Creates a new session with the server.",
    name: "CreateSessionResponse",
    fields: [
        { name:"responseHeader",                           fieldType:"ResponseHeader",                 documentation: "A standard header included in all responses returned by servers."},
        { name:"sessionId",                                fieldType:"NodeId",                         documentation: "A identifier which uniquely identifies the session."},
        { name:"authenticationToken",                      fieldType:"SessionAuthenticationToken",     documentation:"The token used to authenticate the client in subsequent requests."},
        { name:"revisedSessionTimeout",                    fieldType:"Duration",                       documentation: "The session timeout in milliseconds."},
        { name:"serverNonce",                              fieldType:"ByteString",                     documentation: "A random number generated by the server."},
        { name:"serverCertificate",                        fieldType:"ByteString",                     documentation: "The application certificate for the server."},
//xx        { name:"serverCertificate",                        fieldType:"ApplicationInstanceCertificate", documentation: "The application certificate for the server."},
        { name:"serverEndpoints",             isArray:true,fieldType:"EndpointDescription",            documentation: "The endpoints provided by the server."},
        { name:"serverSoftwareCertificates",  isArray:true,fieldType:"SignedSoftwareCertificate",      documentation: "The software certificates owned by the server."},
        { name:"serverSignature",                          fieldType:"SignatureData",                  documentation: "A signature created with the server certificate."},
        { name:"maxRequestMessageSize",                    fieldType:"UInt32",                         documentation: "The maximum message size accepted by the server."}

    ]
};
exports.CreateSessionResponse_Schema = CreateSessionResponse_Schema;
exports.CreateSessionResponse = factories.registerObject(CreateSessionResponse_Schema);


var ActivateSessionRequest_Schema =  {
    documentation: "Activates a session with the server.",
    name: "ActivateSessionRequest",
    fields: [
        { name:"requestHeader",                            fieldType:"RequestHeader",               documentation:"A standard header included in all requests sent to a server." },
        { name:"clientSignature",                          fieldType:"SignatureData",               documentation:"A signature created with the client certificate from the last server nonce returned by the server." },
        { name:"clientSoftwareCertificates", isArray:true, fieldType:"SignedSoftwareCertificate",   documentation:"The software certificates owned by the client." },
        { name:"localeIds",                  isArray:true, fieldType:"LocaleId",                    documentation:"The locales to use with the session." },
        { name:"userIdentityToken",                        fieldType:"ExtensionObject",             documentation:"The user identity to use with the session."},
        { name:"userTokenSignature",                       fieldType:"SignatureData",               documentation:"A digital signature created with the user identity token."}

    ]
};
exports.ActivateSessionRequest_Schema = ActivateSessionRequest_Schema;
exports.ActivateSessionRequest = factories.registerObject(ActivateSessionRequest_Schema);


 var ActivateSessionResponse_Schema =  {
     documentation: "Activates a session with the server.",
     name: "ActivateSessionResponse",
     fields: [
         { name:"responseHeader",               fieldType:"ResponseHeader",   documentation:"A standard header included in all responses returned by servers."},
         { name:"serverNonce",                  fieldType:"ByteString",       documentation:"A random number generated by the server."},
         { name:"results",        isArray:true, fieldType:"StatusCode",       documentation:"Any errors during validation of the software certificates."},
         { name:"diagnosticInfos",isArray:true, fieldType:"DiagnosticInfo",   documentation:"The diagnostics associated with the software certificates results."}

     ]
};
exports.ActivateSessionResponse_Schema = ActivateSessionResponse_Schema;
exports.ActivateSessionResponse = factories.registerObject(ActivateSessionResponse_Schema);


var CloseSessionRequest_Schema =  {
    documentation: "Closes a session with the server.",
    name: "CloseSessionRequest",
    fields: [
        { name:"requestHeader",        fieldType:"RequestHeader",  documentation:"A standard header included in all requests sent to a server."},
        { name:"deleteSubscriptions",  fieldType:"Boolean",         documentation:"If TRUE all subscriptions are deleted when the session is closed."}
    ]
};
exports.CloseSessionRequest_Schema = CloseSessionRequest_Schema;
exports.CloseSessionRequest = factories.registerObject(CloseSessionRequest_Schema);

var CloseSessionResponse_Schema =  {
    documentation: "Closes a session with the server.",
    name: "CloseSessionResponse",
    fields: [
        { name:"responseHeader",        fieldType:"ResponseHeader",  documentation:"A standard header included in all responses returned by servers."}
    ]
};
exports.CloseSessionResponse_Schema = CloseSessionResponse_Schema;
exports.CloseSessionResponse = factories.registerObject(CloseSessionResponse_Schema);



var CancelRequest_Schema =  {
    documentation: "Cancels an outstanding request.",
    name: "CancelRequest",
    fields: [
        { name:"requestHeader",        fieldType:"RequestHeader",  documentation:"A standard header included in all requests sent to a server."}
    ]
};
exports.CancelRequest_Schema = CancelRequest_Schema;
exports.CancelRequest = factories.registerObject(CancelRequest_Schema);

var CancelResponse_Schema =  {
    documentation: "Closes a session with the server.",
    name: "CancelResponse",
    fields: [
        { name:"responseHeader",        fieldType:"ResponseHeader",  documentation:"A standard header included in all responses returned by servers."},
        { name:"CancelCount",           fieldType:"UInt32",          documentation:"The number of requests successfully cancelled."}
    ]
};
exports.CancelResponse_Schema = CancelResponse_Schema;
exports.CancelResponse = factories.registerObject(CancelResponse_Schema);



//---------------------------------------------------------
// extension objects
//---------------------------------------------------------
var UserIdentityToken_Schema = {
    name:"UserIdentityToken",
    documentation: "A base type for a user identity token.",
    fields: [
        { name: "policyId", fieldType:"String", documentation:"The policy id specified in a user token policy for the endpoint being used."}
    ]
};

var AnonymousIdentityToken_Schema = {
    name:"AnonymousIdentityToken",
    documentation: "A token representing an anonymous user.",
    fields: [
        // base type : UserIdentityToken
        { name: "policyId",             fieldType:"String", documentation:"The policy id specified in a user token policy for the endpoint being used."}
    ]
};
exports.AnonymousIdentityToken_Schema = AnonymousIdentityToken_Schema;
exports.AnonymousIdentityToken = factories.registerObject(AnonymousIdentityToken_Schema);


var UserNameIdentityToken_Schema = {
    name:"UserNameIdentityToken",
    documentation: "A token representing a user identified by a user name and password",
    fields: [
        // base type : UserIdentityToken
        { name: "policyId",             fieldType:"String", documentation:"The policy id specified in a user token policy for the endpoint being used."},
        //
        { name: "userName"            , fieldType:"String" , documentation:"The user name"},
        { name: "password"            , fieldType:"String" , documentation:"The password encrypted with the server certificate."},
        { name: "encryptionAlgorithm" , fieldType:"String" , documentation:"The algorithm used to encrypt the password."}
    ]
};
exports.UserNameIdentityToken_Schema = UserNameIdentityToken_Schema;
exports.UserNameIdentityToken = factories.registerObject(UserNameIdentityToken_Schema);


var X509IdentityToken_Schema = {
    name:"X509IdentityToken",
    documentation: "A token representing a user identified by an X509 certificate.",
    fields: [
        // base type : UserIdentityToken
        { name: "policyId",                    fieldType:"String",     documentation:"The policy id specified in a user token policy for the endpoint being used."},
        //
        { name: "certificateData"            , fieldType:"ByteString", documentation:"The certificate."}
    ]
};
exports.X509IdentityToken_Schema = X509IdentityToken_Schema;
exports.X509IdentityToken = factories.registerObject(X509IdentityToken_Schema);

var IssuedIdentityToken_Schema = {
    name:"IssuedIdentityToken",
    documentation: "A token representing a user identified by a WS-Security XML token.",
    fields: [
        // base type : UserIdentityToken
        { name: "policyId",              fieldType:"String",     documentation:"The policy id specified in a user token policy for the endpoint being used."},
        //
        { name: "tokenData"            , fieldType:"ByteString", documentation:"The XML token encrypted with the server certificate."},
        { name: "encryptionAlgorithm"  , fieldType:"String",     documentation:"The algorithm used to encrypt the password."}
    ]
};
exports.IssuedIdentityToken_Schema = IssuedIdentityToken_Schema;
exports.IssuedIdentityToken = factories.registerObject(IssuedIdentityToken_Schema);

